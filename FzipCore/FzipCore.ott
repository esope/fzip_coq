embed
{{ coq
Inductive tag {A : Type} : Type :=
  | T : A -> tag
  | U : tag
  | E : tag
  | Eq : A -> tag.

Definition pure {A: Type} (G: list (atom * @tag A)) := forall a, ~ binds a E G.
Hint Unfold pure.
}}

metavar termvar, x, y, z ::= {{ repr-locally-nameless }}
metavar typvar, a, b, c  ::= {{ repr-locally-nameless }}

grammar

typ, t :: typ_ ::=
  | a              ::   :: var
  | t1 -> t2       ::   :: arrow
  | t1 * t2        ::   :: prod
  | forall a . t   ::   :: forall (+ bind a in t +)
  | exists a . t   ::   :: exists (+ bind a in t +)
  | ( t )          :: S :: paren {{ coq [[t]] }}
  | { t2 / a } t1  :: M :: subst {{ coq (open_typ_wrt_typ [[a t1]] [[t2]]) }}

term, e, f, g :: term_ ::=
  | x              ::   :: var
  | \ ( x : t ) e  ::   :: abs (+ bind x in e +)
  | e1 e2          ::   :: app
  | let x = e1 in e2 ::   :: let (+ bind x in e2 +)
  | ( e1 , e2 )    ::   :: pair
  | fst e          ::   :: fst
  | snd e          ::   :: snd
  | /\ a . e       ::   :: gen (+ bind a in e +)
  | e [ t ]        ::   :: inst
  | ex a . e       ::   :: exists (+ bind a in e +)
  | open < t > e   ::   :: open
  | nu a . e       ::   :: nu (+ bind a in e +)
  | sig < t1 > ( a = t2 ) e :: :: sigma (+ bind a in e +) 
  | ( e : t )      ::   :: coerce
  | ( e )          :: S :: paren  {{ coq ([[e]]) }}
  | { e2 / x } e1  :: M :: subst {{ coq (open_term_wrt_term [[x e1]] [[e2]]) }}
  | { t  / a } e   :: M :: tsubst {{ coq (open_term_wrt_typ  [[a e]]  [[t]]) }}

substitutions
  single e x :: subst
  single t a :: tsubst

freevars
  e x :: fv
  t a :: ftv

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

grammar

red_tag, A :: '' ::=
  | noeps  ::  :: NoEps
  | eps    ::  :: Eps

typing_env, G :: '' ::=           {{ coq list (atom * @tag typ) }}
  | empty          ::   :: empty  {{ coq nil }}
  | G , x : t      ::   :: cons_T {{ coq ([[x]]~(T [[t]]) ++ [[G]]) }}
  | G , U a        ::   :: cons_U {{ coq ([[a]]~U ++ [[G]]) }}
  | G , E a        ::   :: cons_E {{ coq ([[a]]~E ++ [[G]]) }}
  | G , a = t      ::   :: cons_Eq {{ coq ([[a]]~(Eq [[t]]) ++ [[G]]) }}
  | G1 , G2        :: S :: app {{ coq (([[G2]]) ++ ([[G1]])) }}
  | ( G )          :: S :: paren {{ coq ([[G]]) }}

formula :: formula_ ::=
  | judgement      :: :: judgement
  | x : t in G     :: :: binds_T {{ coq binds ([[x]]) (T ([[t]])) ([[G]]) }}
  | U a in G       :: :: binds_U {{ coq binds ([[a]]) U ([[G]]) }}
  | E a in G       :: :: binds_E {{ coq binds ([[a]]) E ([[G]]) }}
  | a = t in G     :: :: binds_Eq {{ coq binds ([[a]]) (Eq ([[t]])) ([[G]]) }}
  | a in G         :: :: binds_a  {{ coq (binds ([[a]]) U ([[G]]) \/ binds ([[a]]) E ([[G]]) \/ exists t, binds ([[a]]) (Eq t) ([[G]])) }}
  | a not in dom G :: :: free_dom_a {{ coq [[a]] `notin` dom [[G]] }}
  | x not in dom G :: :: free_dom_x {{ coq [[x]] `notin` dom [[G]] }}
  | pure G         :: :: pure {{ coq (pure ([[G]])) }}
  | a not in ftv t :: :: free_ftv_typ {{ coq [[a]] `notin` ftv_typ ([[t]]) }}
  | a not in ftv e :: :: free_ftv_term {{ coq [[a]] `notin` ftv_term ([[e]]) }}
  | e not coercion :: :: not_coerce {{ coq (forall e' t, ([[e]]) <> term_coerce e' t) }}
  | a <> b         :: :: neq_atom {{ coq [[a]] <> [[b]] }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jval :: '' ::=

defn
e val
:: :: val :: val_ by

------------ :: abs
\(x:t) e val

--------- :: gen
/\a.e val

  e1 val
  e2 val
----------- :: pair
(e1,e2) val

     e val
e not coercion
--------------- :: coerce
   (e:t) val

          e val
--------------------------- :: exists
ex b. sig <b> (a = t) e val

defn
e result
:: :: result :: result_ by

 e val
-------- :: val
e result

       e result
------------------------ :: sigma
sig <b> (a = t) e result

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jzip :: '' ::=

defn
G1 zip G2 = G3
:: :: zip :: zip_ by

----------------------- :: empty
empty zip empty = empty

    x not in dom G1
    x not in dom G2
      G1 zip G2 = G
------------------------- :: TT
G1,x:t zip G2,x:t = G,x:t

    a not in dom G1
    a not in dom G2
      G1 zip G2 = G
------------------------- :: UU
G1,U a zip G2,U a = G,U a

    a not in dom G1
    a not in dom G2
      G1 zip G2 = G
------------------------- :: EU
G1,E a zip G2,U a = G,E a

    a not in dom G1
    a not in dom G2
      G1 zip G2 = G
------------------------- :: E
G1 zip G2,E a = G,E a

    a not in dom G1
    a not in dom G2
      G1 zip G2 = G
------------------------- :: EqEq
G1,a=t zip G2,a=t = G,a=t

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
  Jwf_env_typ :: '' ::=

defn
    G |- ok :: :: wfenv :: wfenv_ by

----------- :: empty
empty |- ok

x not in dom G
  G |- t ok
-------------- :: cons_T
 G, x:t |- ok

a not in dom G
   G |- ok
-------------- :: cons_U
 G, U a |- ok

a not in dom G
   G |- ok
-------------- :: cons_E
 G, E a |- ok

a not in dom G
   G |- t ok
--------------- :: cons_Eq
 G, a = t |- ok

defn
    G |- t ok :: :: wftyp :: wftyp_ by

  a in G
 G |- ok
--------- :: var
G |- a ok

   G |- t1 ok
   G |- t2 ok
---------------- :: arrow
G |- t1 -> t2 ok

  G |- t1 ok
  G |- t2 ok
--------------- :: pair
G |- t1 * t2 ok

  G, U a |- t ok
------------------- :: forall
G |- forall a. t ok

  G, U a |- t ok
------------------- :: exists
G |- exists a. t ok

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
  Jwftypeq :: '' ::=

defn
    G |- t1 = t2 :: :: wftypeq :: wftypeq_ by

  a in G
 G |- ok
---------- :: var
G |- a = a

a = t in G
 G |- ok
---------- :: eq
G |- a = t

    G |- t1 = t1'
    G |- t2 = t2'
-------------------------- :: arrow
G |- t1 -> t2 = t1' -> t2'

    G |- t1 = t1'
    G |- t2 = t2'
------------------------ :: prod
G |- t1 * t2 = t1' * t2'

     G,U a |- t1 = t2
-------------------------------- :: forall
G |- forall a. t1 = forall a. t2

     G,U a |- t1 = t2
-------------------------------- :: exists
G |- exists a. t1 = exists a. t2

G |- t2 = t1
------------ :: sym
G |- t1 = t2

G |- t1 = t2
G |- t2 = t3
------------ :: trans
G |- t1 = t3

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
  Jwfterm :: '' ::=

defn
    G |- e : t :: :: wfterm :: wfterm_ by

pure G
G |- ok
x:t in G
---------- :: val
G |- x : t

G1 zip G2 = G
G1 |- e1 : t2->t1
G2 |- e2 : t2
----------------- :: app
G |- e1 e2 : t1

pure G
G, x:t1 |- e : t2
---------------------- :: abs
G |- \(x:t1)e : t1->t2

      G1 zip G2 = G
      G1 |- e1 : t1
   G2, x:t1 |- e2 : t2
-------------------------- :: let
G |- let x = e1 in e2 : t2

    G1 zip G2 = G
    G1 |- e1 : t1
    G2 |- e2 : t2
----------------------- :: pair
G |- (e1, e2) : t1 * t2

G |- e : t1 * t2
---------------- :: fst
G |- fst e : t1

G |- e : t1 * t2
---------------- :: snd
G |- snd e : t2

     G |- t ok
G |- e : forall a.t'
-------------------- :: inst
G |- e [t] : {t/a}t'

        pure G
    G, U a |- e : t
----------------------- :: gen
G |- /\a.e : forall a.t

      G, E a |- e : t
-------------------------- :: exists
G |- ex a. e : exists a. t

      b not in dom (G1,G2)
    G1,G2 |- e : exists a. t
---------------------------------- :: open
(G1,E b),G2 |- open <b> e : {b/a}t

G, E a |- e : t
---------------- :: nu
G |- nu a. e : t

         b not in dom (G1,G2)
      (G1, G2), a = t' |- e : {a/b}t
--------------------------------------- :: sigma
(G1, E b), G2 |- sig <b> (a = t') e : t

   G |- t' = t
   G |- e : t'
---------------- :: coerce
G |- (e : t) : t

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jred0 :: '' ::=

defn
e1 -->[ A ] e2
:: :: red0 :: red0_ by

             e2 val
----------------------------------------- :: beta_v_red
(\(x:t)e1) e2 -->[noeps] let x = e2 in e1

             e1 val
--------------------------------------- :: beta_v_let
let x = e1 in e2 -->[noeps] {e1 / x} e2

    (e1, e2) val
-------------------------- :: pi_fst
fst (e1, e2) -->[noeps] e1

    (e1, e2) val
-------------------------- :: pi_snd
snd (e1, e2) -->[noeps] e2

-------------------------------- :: beta_t
(/\a.e) [t] -->[noeps] {t / a} e

          e result
----------------------------------- :: open_exists
open <b> ex a. e -->[noeps]  {b/a}e

         b not in ftv t
         b not in ftv e
           e result
----------------------------------------- :: nu_sigma
nu b. sig <b> (a = t) e -->[noeps] {t/a}e

                       e2 val
-------------------------------------------------------------------- :: coerce_app
(\(x:t2') e1 : t2->t1) e2 -->[noeps] ((\(x:t2') e1) (e2 : t2') : t1)

                   (e1, e2) val
------------------------------------------------------- :: coerce_fst
fst ((e1, e2) : t1 * t2) -->[noeps] (fst (e1, e2) : t1)

                   (e1, e2) val
------------------------------------------------------- :: coerce_snd
snd ((e1, e2) : t1 * t2) -->[noeps] (snd (e1, e2) : t2)

----------------------------------------------------------------- :: coerce_inst
(/\a. e : forall a. t1) [t2] -->[noeps] ((/\a.e) [t2] : {t2/a}t1)

                         ex a. e val
----------------------------------------------------------------------- :: coerce_open
open <b> (ex a. e : exists a. t) -->[noeps] (open <b> ex a. e : {b/a}t)

        (e : t1) val
----------------------------------- :: coerce_coerce
((e : t1) : t2) -->[noeps] (e : t2)

                  sig <b> (a = t) e1 result
                       e2 result
----------------------------------------------------------------- :: sigma_appL
(sig <b> (a = t) e1) e2 -->[noeps] sig <b> (a = t) (e1 ({a/b}e2))

                        e1 val
              sig <b> (a = t) e2 result
----------------------------------------------------------------- :: sigma_appR
e1 (sig <b> (a = t) e2) -->[noeps] sig <b> (a = t) (({a/b}e1) e2)

                  sig <b> (a = t) e1 result
----------------------------------------------------------------------------------- :: sigma_letL
let x = (sig <b> (a = t) e1) in e2 -->[noeps] sig <b> (a = t) let x = e1 in {a/b}e2

               sig <b> (a = t) e1 result
                       e2 result
----------------------------------------------------------------- :: sigma_pairL
(sig <b> (a = t) e1, e2) -->[noeps] sig <b> (a = t) (e1, {a/b}e2)

                        e1 val
              sig <b> (a = t) e2 result
----------------------------------------------------------------- :: sigma_pairR
(e1, sig <b> (a = t) e2) -->[noeps] sig <b> (a = t) ({a/b}e1, e2)


            sig <b> (a = t) e result
------------------------------------------------------ :: sigma_fst
fst sig <b> (a = t) e -->[noeps] sig <b> (a = t) fst e

            sig <b> (a = t) e result
------------------------------------------------------ :: sigma_snd
snd sig <b> (a = t) e -->[noeps] sig <b> (a = t) snd e

              sig <b> (a = t) e result
----------------------------------------------------------------- :: sigma_inst
(sig <b> (a = t) e) [t'] -->[noeps] sig <b> (a = t) (e [{b/a}t'])

               sig <b> (a = t) e result
---------------------------------------------------------------- :: sigma_open
open <c> sig <b> (a = t) e -->[noeps] sig <b> (a = t) open <c> e

                                      e result
----------------------------------------------------------------------------------------------- :: sigma_sigma
sig <b1> (a1 = t1) sig <b2> (a2 = t2) e -->[eps] sig <b2> (a2 = {t1/a1}t2) sig <b1> (a1 = t1) e

%%                       b <> c
%%                   c not in ftv t
%%                      e result
%% --------------------------------------------------- :: sigma_nu
%% nu c. sig <b> (a = t) e --> sig <b> (a = t) nu c. e

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jred1 :: '' ::=

defn
e1 --->[ A ] e2
:: :: red1 :: red1_ by

e -->[A] e'
------------ :: empty
e --->[A] e'

              e1 --->[A] e1'
------------------------------------------ :: let
let x = e1 in e2 --->[A] let x = e1' in e2

   e1 --->[A] e1'
-------------------- :: appL
e1 e2 --->[A] e1' e2

   e2 --->[A] e2'
-------------------- :: appR
e1 e2 --->[A] e1 e2'

      e1 --->[A] e1'
-------------------------- :: pairL
(e1, e2) --->[A] (e1', e2)

      e2 --->[A] e2'
-------------------------- :: pairR
(e1, e2) --->[A] (e1, e2')

    e --->[A] e'
-------------------- :: fst
fst e --->[A] fst e'

    e --->[A] e'
-------------------- :: snd
snd e --->[A] snd e'

    e --->[A] e'
-------------------- :: inst
e [t] --->[A] e' [t]

      e --->[A] e'
------------------------ :: exists
ex a. e --->[A] ex a. e'

         e --->[A] e'
------------------------------ :: open
open <b> e --->[A] open <b> e'

      e --->[A] e'
------------------------ :: nu
nu a. e --->[A] nu a. e'

                e --->[A] e'
-------------------------------------------- :: sigma
sig <b> (a = t) e --->[A] sig <b> (a = t) e'

      e --->[A] e'
------------------------ :: coerce
(e : t) --->[A] (e' : t)
